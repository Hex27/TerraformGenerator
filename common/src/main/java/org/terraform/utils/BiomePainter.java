package org.terraform.utils;

import org.jetbrains.annotations.NotNull;
import org.terraform.biome.BiomeBank;
import org.terraform.data.TerraformWorld;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Random;

/**
 * A tool to visualize biomes generated by terraform.
 */
public class BiomePainter extends JFrame {
    static final int inGameWidth = 6000;
    static final int windowWidth = 1000;
    static final int offsets = 5000;
    int seed = 0;

    public BiomePainter() {
        super("Biome test");
        // You can set the content pane of the frame to your custom class.
        if(seed == 0) seed = new Random().nextInt(269286925);
        setContentPane(new DrawPane());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(windowWidth, windowWidth);
        setVisible(true);
    }

    public static void main(String[] args) {
        new BiomePainter();
    }

    // Create a component that you can actually draw on.
    class DrawPane extends JPanel {
        final JLabel l;
        final BufferedImage i;

        public DrawPane() {
            l = new JLabel("Seed: " + seed);
            l.setFont(l.getFont().deriveFont(Font.BOLD, 25f));
            setLayout(new FlowLayout(FlowLayout.LEFT));
            add(l);

            i = new BufferedImage(windowWidth, windowWidth, BufferedImage.TYPE_INT_RGB);

            draw(i.getGraphics());
        }

        void draw(@NotNull Graphics g) {
            TerraformWorld world = TerraformWorld.get("world", seed);

            for(int x = 0; x < windowWidth; x++) {
                for(int z = 0; z < windowWidth; z++) {
                    int realX = (int) Math.round((x / (double) windowWidth) * (double) inGameWidth + offsets);
                    int realZ = (int) Math.round((z / (double) windowWidth) * (double) inGameWidth + offsets);
                    BiomeBank biome = world.getBiomeBank(realX, realZ);
                    switch(biome) {
                        case PLAINS:
                            g.setColor(new Color(100, 150, 100));
                            break;
                        case TAIGA:
                            g.setColor(new Color(0, 100, 50));
                            break;
                        case DESERT:
                            g.setColor(Color.YELLOW);
                            break;
                        case JUNGLE:
                            g.setColor(new Color(100, 255, 100));
                            break;
                        case SAVANNA:
                            g.setColor(new Color(200, 200, 100));
                            break;
                        case SWAMP:
                            g.setColor(Color.MAGENTA);
                            break;
                        case BADLANDS:
                            g.setColor(Color.orange);
                            break;
                        case FOREST:
                            g.setColor(Color.green);
                            break;
                        case DARK_FOREST:
                            g.setColor(Color.red);
                            break;
                        case BAMBOO_FOREST:
                            g.setColor(new Color(100, 150, 0));
                            break;
                        case MUDFLATS:
                            g.setColor(Color.darkGray);
                            break;
                        default:
                            g.setColor(Color.PINK);
                            break;
                    }

                    if(biome.name().contains("OCEAN")) g.setColor(Color.blue);
                    else if(biome.name().contains("MOUNTAIN")) g.setColor(Color.gray);
                    else if(biome.name().contains("BEACH")) g.setColor(Color.yellow);
                    else if(biome.name().contains("ICY") || biome.name().contains("SNOWY")) g.setColor(Color.white);
                    else if(biome.name().contains("RIVER")) g.setColor(Color.blue);

                    g.drawRect(x, z, 1, 1);
                }
            }
        }

        public void paintComponent(@NotNull Graphics g) {
            g.drawImage(i, 0, 0, null);
        }
    }
}
